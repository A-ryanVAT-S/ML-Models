# -*- coding: utf-8 -*-
"""Diabetes Prediction with SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iSrvVO5JPcsToU_0LPUj5c6CP1JVlm0F

IMPORTING THE DEPENDENCIES
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""DATA COLLECTION AND ANALYSIS

PIMA DIABETES DATASET
"""

#reading the dataset
diabetes_dataset=pd.read_csv('/content/diabetes.csv')

#printing the first 5 rows & size for info
diabetes_dataset.head()
diabetes_dataset.shape

#getting the stats
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()
#0->Non-diabetic
#1->Diabeic

#analysing on mean
diabetes_dataset.groupby('Outcome').mean()

"""We can see the differences"""

#seperating the data and labels
X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']
print(X.shape,Y.shape)
print(X,Y)

"""DATA STANDARIZATION"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X);

X=standardized_data
Y=diabetes_dataset['Outcome']
print(X,Y)# conforming the data

"""Train Test Data Split"""

X_train, X_test, Y_train,Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

#trainning the SVM classifier
classifier.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

#ACCURACY SCORE ON THE TRAINING DATA
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

"""Making a Predictive System for Any Patient

"""

input_data = (5,166,72,19,175,25.8,0.587,51)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

