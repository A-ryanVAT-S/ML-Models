# -*- coding: utf-8 -*-
"""Rock vs Mine with logistic Regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wK3RR7Sxs2UUjylu_RyVx9y_0PS0d5su

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#making a Dataframe using the dataset
sonarData = pd.read_csv('/content/sonar data.csv',header=None)

sonarData.head()

sonarData.describe()
sonarData.shape

sonarData[60].value_counts()

sonarData.groupby(60).mean()

#seperating Data and Labels
X=sonarData.drop(columns=60,axis=1)
Y=sonarData[60]

X.head()

Y

"""Training and Testing Data"""

X_train, X_test, Y_train, Y_test = train_test_split(
    X, Y, test_size=0.1, stratify=Y, random_state=2
)

print(X.shape)
print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

"""Model Training"""

model = LogisticRegression()

model.fit(X_train,Y_train)

"""Model Evaluation:"""

#accuracy of model
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("Accuracy :",training_data_accuracy)

#accuracy of model for test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("Accuracy :",test_data_accuracy)

"""Making a Predictive System

"""

input_data=(0.0635,0.0709,0.0453,0.0333,0.0185,0.1260,0.1015,0.1918,0.3362,0.3900,0.4674,0.5632,0.5506,0.4343,0.3052,0.3492,0.3975,0.3875,0.5280,0.7198,0.7702,0.8562,0.8688,0.9236,1.0000,0.9662,0.9822,0.7360,0.4158,0.2918,0.3280,0.3690,0.3450,0.2863,0.0864,0.3724,0.4649,0.3488,0.1817,0.1142,0.1220,0.2621,0.4461,0.4726,0.3263,0.1423,0.0390,0.0406,0.0311,0.0086,0.0154,0.0048,0.0025,0.0087,0.0072,0.0095,0.0086,0.0085,0.0040,0.00510);
#changing input to numpy array

input_numpy=np.asarray(input_data)

#reshape it
reshaped_numpy= input_numpy.reshape(1,-1)
prediction=model.predict(reshaped_numpy)
print(prediction)

if prediction[0] == 'R':
    print("it is a Rock")
else:
    print("it is a Mine")

